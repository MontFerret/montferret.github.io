<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>High-level operators on Ferret</title>
    <link>https://www.montferret.dev/docs/fql/operators/high-level/</link>
    <description>Recent content in High-level operators on Ferret</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://www.montferret.dev/docs/fql/operators/high-level/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FOR</title>
      <link>https://www.montferret.dev/docs/fql/operators/high-level/for/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/operators/high-level/for/</guid>
      <description>FOR   The versatile FOR keyword can be used to iterate over a different collections like array, objects and set of HTML elements.
FOR-IN   FOR variableName IN expression     document.addEventListener(&#39;DOMContentLoaded&#39;, function () { const editor = ace.edit(&#39;code-120-text&#39;); editor.setTheme(&#34;ace/theme/tomorrow_night&#34;); editor.session.setMode(&#34;ace/mode/&#34; + &#39;aql&#39;); editor.setOptions({ readOnly: true, highlightActiveLine: false, highlightGutterLine: false, displayIndentGuides: false, printMargin: false }); editor.renderer.$cursorLayer.element.style.display = &#34;none&#34; }, false);   A FOR-IN statement iterates through all entries of an array, object, or values that implement Iterable interface.</description>
    </item>
    
    <item>
      <title>RETURN</title>
      <link>https://www.montferret.dev/docs/fql/operators/high-level/return/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/operators/high-level/return/</guid>
      <description>RETURN   The RETURN statement can be used to produce the result of a query. It is mandatory to specify a RETURN statement at the end of each block in a data-selection query, otherwise the query will be invalid. Using RETURN on the main level in data-modification queries is optional.
The general syntax for RETURN is:
RETURN expression     document.addEventListener(&#39;DOMContentLoaded&#39;, function () { const editor = ace.</description>
    </item>
    
    <item>
      <title>FILTER</title>
      <link>https://www.montferret.dev/docs/fql/operators/high-level/filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/operators/high-level/filter/</guid>
      <description>FILTER   The FILTER statement can be used to restrict the results to elements that match an arbitrary logical condition.
The general syntax for FILTER is:
FILTER expression     document.addEventListener(&#39;DOMContentLoaded&#39;, function () { const editor = ace.edit(&#39;code-343-text&#39;); editor.setTheme(&#34;ace/theme/tomorrow_night&#34;); editor.session.setMode(&#34;ace/mode/&#34; + &#39;aql&#39;); editor.setOptions({ readOnly: true, highlightActiveLine: false, highlightGutterLine: false, displayIndentGuides: false, printMargin: false }); editor.renderer.$cursorLayer.element.style.display = &#34;none&#34; }, false);   expression must be a condition that evaluates to either false or true.</description>
    </item>
    
    <item>
      <title>SORT</title>
      <link>https://www.montferret.dev/docs/fql/operators/high-level/sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/operators/high-level/sort/</guid>
      <description>SORT   The SORT statement will force a sort of the array of already produced intermediate results in the current block. SORT allows specifying one or multiple sort criteria and directions. The general syntax is:
SORT expression direction     document.addEventListener(&#39;DOMContentLoaded&#39;, function () { const editor = ace.edit(&#39;code-221-text&#39;); editor.setTheme(&#34;ace/theme/tomorrow_night&#34;); editor.session.setMode(&#34;ace/mode/&#34; + &#39;aql&#39;); editor.setOptions({ readOnly: true, highlightActiveLine: false, highlightGutterLine: false, displayIndentGuides: false, printMargin: false }); editor.</description>
    </item>
    
    <item>
      <title>LIMIT</title>
      <link>https://www.montferret.dev/docs/fql/operators/high-level/limit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/operators/high-level/limit/</guid>
      <description>LIMIT   The LIMIT statement allows slicing the result array using an offset and a count. It reduces the number of elements in the result to at most the specified number. Two general forms of LIMIT are followed:
LIMIT count LIMIT offset, count     document.addEventListener(&#39;DOMContentLoaded&#39;, function () { const editor = ace.edit(&#39;code-761-text&#39;); editor.setTheme(&#34;ace/theme/tomorrow_night&#34;); editor.session.setMode(&#34;ace/mode/&#34; + &#39;aql&#39;); editor.setOptions({ readOnly: true, highlightActiveLine: false, highlightGutterLine: false, displayIndentGuides: false, printMargin: false }); editor.</description>
    </item>
    
    <item>
      <title>LET</title>
      <link>https://www.montferret.dev/docs/fql/operators/high-level/let/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/operators/high-level/let/</guid>
      <description>LET   The LET statement can be used to assign an arbitrary value to a variable. The variable is then introduced in the scope the LET statement is placed in.
The general syntax is:
LET variableName = expression     document.addEventListener(&#39;DOMContentLoaded&#39;, function () { const editor = ace.edit(&#39;code-21-text&#39;); editor.setTheme(&#34;ace/theme/tomorrow_night&#34;); editor.session.setMode(&#34;ace/mode/&#34; + &#39;aql&#39;); editor.setOptions({ readOnly: true, highlightActiveLine: false, highlightGutterLine: false, displayIndentGuides: false, printMargin: false }); editor.</description>
    </item>
    
    <item>
      <title>COLLECT</title>
      <link>https://www.montferret.dev/docs/fql/operators/high-level/collect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/operators/high-level/collect/</guid>
      <description>COLLECT   The COLLECT keyword can be used to group an array by one or multiple group criteria.
The COLLECT statement will eliminate all local variables in the current scope. After COLLECT only the variables introduced by COLLECT itself are available.
There are several syntax variants for COLLECT operations:
COLLECT variableName = expression COLLECT variableName = expression INTO groupsVariable COLLECT variableName = expression INTO groupsVariable = projectionExpression COLLECT variableName = expression INTO groupsVariable KEEP keepVariable COLLECT variableName = expression WITH COUNT INTO countVariable COLLECT variableName = expression AGGREGATE variableName = aggregateExpression COLLECT variableName = expression AGGREGATE variableName = aggregateExpression INTO groupsVariable COLLECT AGGREGATE variableName = aggregateExpression COLLECT AGGREGATE variableName = aggregateExpression INTO groupsVariable COLLECT WITH COUNT INTO countVariable     document.</description>
    </item>
    
  </channel>
</rss>
