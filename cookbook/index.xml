<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cookbook on Ferret</title>
    <link>https://www.montferret.dev/cookbook/</link>
    <description>Recent content in Cookbook on Ferret</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://www.montferret.dev/cookbook/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google search</title>
      <link>https://www.montferret.dev/cookbook/google-search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/cookbook/google-search/</guid>
      <description>Run   LET google = DOCUMENT(&#34;https://www.google.com/&#34;, { driver: &#34;cdp&#34;, userAgent: &#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.87 Safari/537.36&#34; }) HOVER(google, &#39;input[name=&#34;q&#34;]&#39;) WAIT(RAND(100)) INPUT(google, &#39;input[name=&#34;q&#34;]&#39;, @criteria, 30) WAIT(RAND(100)) WAIT_ELEMENT(google, &#39;.UUbT9&#39;) WAIT(RAND(100)) CLICK(google, &#39;input[name=&#34;btnK&#34;]&#39;) WAIT_NAVIGATION(google) FOR result IN ELEMENTS(google, &#39;.g&#39;) // filter out extra elements like videos and &#39;People also ask&#39; FILTER TRIM(result.attributes.class) == &#39;g&#39; RETURN { title: INNER_TEXT(result, &#39;h3&#39;), description: INNER_TEXT(result, &#39;.rc  div:nth-child(2) span&#39;), url: INNER_TEXT(result, &#39;cite&#39;) }       document.</description>
    </item>
    
    <item>
      <title>Pagination</title>
      <link>https://www.montferret.dev/cookbook/pagination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/cookbook/pagination/</guid>
      <description>There are several way how to implement pagination.
WHILE loop Since v0.13.0, pagination can be implemented with for-while loop.
For paginations, it&#39;s recommended to use DO-WHILE variation of the loop, in order to process at least the first page.  Run   LET doc = DOCUMENT(&#34;https://github.com/MontFerret/ferret/stargazers&#34;, { driver: &#34;cdp&#34; }) LET nextSelector = &#34;.paginate-container .BtnGroup a:nth-child(2)&#34; LET elementsSelector = &#39;.follow-list li&#39; FOR i DO WHILE ELEMENT_EXISTS(doc, nextSelector) LIMIT 3 LET wait = i  0 ?</description>
    </item>
    
    <item>
      <title>iframes</title>
      <link>https://www.montferret.dev/cookbook/iframes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/cookbook/iframes/</guid>
      <description>In order to find a particular iframe, you need to find it by its name or src.
Beware, a target iframe must be in the same domain, otherwise its properties and content will be unavailable.  Run   LET page = DOCUMENT(&#34;https://www.w3schools.com/html/html_iframe.asp&#34;, { driver: &#34;cdp&#34; }) LET content = ( FOR f IN page.frames FILTER f.URL == &#34;https://www.w3schools.com/html/default.asp&#34; RETURN f.head.innerHTML ) RETURN FIRST(content)       document.</description>
    </item>
    
    <item>
      <title>Screenshots</title>
      <link>https://www.montferret.dev/cookbook/screenshot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/cookbook/screenshot/</guid>
      <description>Output of the function is base64-encoded binary file.
Run   RETURN SCREENSHOT(&#34;https://www.montferret.dev/&#34;)       document.addEventListener(&#39;DOMContentLoaded&#39;, function () { function createEditor(id, mode) { const editor = ace.edit(id); editor.setTheme(&#34;ace\/theme\/tomorrow_night&#34;); editor.session.setMode(&#34;ace/mode/&#34; + mode); editor.setOptions({ displayIndentGuides: false, printMargin: false }); return editor; } const btn = document.querySelector(&#39;#code-editor-231-run-button&#39;); const textEditor = createEditor(&#39;code-editor-231-text&#39;, &#39;aql&#39;); const resultEditor = createEditor(&#39;code-editor-231-result&#39;, &#39;json&#39;); resultEditor.setReadOnly(true);function setContent(editor, content) { editor.setValue(content, -1); } let isRunning = false; function onStart() { isRunning = true; textEditor.</description>
    </item>
    
    <item>
      <title>Navigation</title>
      <link>https://www.montferret.dev/cookbook/navigation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/cookbook/navigation/</guid>
      <description>Navigate by url Run   LET page = DOCUMENT(&#34;https://github.com/&#34;, { driver: &#34;cdp&#34; }) LET header1 = ELEMENT(page, &#39;meta[name=&#34;description&#34;]&#39;).attributes.content NAVIGATE(page, &#34;https://github.com/features&#34;, 10000) LET header2 = ELEMENT(page, &#39;meta[name=&#34;description&#34;]&#39;).attributes.content RETURN [header1, header2]       document.addEventListener(&#39;DOMContentLoaded&#39;, function () { function createEditor(id, mode) { const editor = ace.edit(id); editor.setTheme(&#34;ace\/theme\/tomorrow_night&#34;); editor.session.setMode(&#34;ace/mode/&#34; + mode); editor.setOptions({ displayIndentGuides: false, printMargin: false }); return editor; } const btn = document.querySelector(&#39;#code-editor-488-run-button&#39;); const textEditor = createEditor(&#39;code-editor-488-text&#39;, &#39;aql&#39;); const resultEditor = createEditor(&#39;code-editor-488-result&#39;, &#39;json&#39;); resultEditor.</description>
    </item>
    
  </channel>
</rss>
