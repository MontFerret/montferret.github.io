<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ferret</title>
    <link>https://www.montferret.dev/</link>
    <description>Recent content on Ferret</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.montferret.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>arrays</title>
      <link>https://www.montferret.dev/docs/stdlib/arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/stdlib/arrays/</guid>
      <description>APPEND   Source
APPEND appends a new item to an array and returns a new array with a given element. If uniqueOnly is set to true, then will add the item only if it&amp;rsquo;s unique.
           Argument Type Default value Description   arr Any[]  Target array.   item Any  Target value to add.    Returns Any[] New array.</description>
    </item>
    
    <item>
      <title>collections</title>
      <link>https://www.montferret.dev/docs/stdlib/collections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/stdlib/collections/</guid>
      <description>INCLUDES   Source
INCLUDES checks whether a container includes a given value.
           Argument Type Default value Description   haystack String Any[] Object Iterable  The value container.   needle Any  The target value to assert.    Returns Boolean A boolean value that indicates whether a container contains a given value.
  LENGTH   Source</description>
    </item>
    
    <item>
      <title>datetime</title>
      <link>https://www.montferret.dev/docs/stdlib/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/stdlib/datetime/</guid>
      <description>DATE   Source
DATE converts RFC3339 date time string to DateTime object.
           Argument Type Default value Description   time String  String in rfc3339 format.    Returns DateTime New datetime object derived from timestring.
  DATE_ADD   Source
DATE_ADD adds amount given in unit to date. The following units are available: * y, year, year * m, month, months * w, week, weeks * d, day, days * h, hour, hours * i, minute, minutes * s, second, seconds * f, millisecond, milliseconds</description>
    </item>
    
    <item>
      <title>Google search</title>
      <link>https://www.montferret.dev/cookbook/google-search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/cookbook/google-search/</guid>
      <description>Run   LET google = DOCUMENT(&#34;https://www.google.com/&#34;, { driver: &#34;cdp&#34;, userAgent: &#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.87 Safari/537.36&#34; }) HOVER(google, &#39;input[name=&#34;q&#34;]&#39;) WAIT(RAND(100)) INPUT(google, &#39;input[name=&#34;q&#34;]&#39;, &#34;ferret&#34;, 30) WAIT(RAND(100)) WAIT_ELEMENT(google, &#39;.UUbT9&#39;) WAIT(RAND(100)) CLICK(google, &#39;input[name=&#34;btnK&#34;]&#39;) WAIT_NAVIGATION(google) FOR result IN ELEMENTS(google, &#39;.g&#39;) // filter out extra elements like videos and &#39;People also ask&#39; FILTER TRIM(result.attributes.class) == &#39;g&#39; RETURN { title: INNER_TEXT(result, &#39;h3&#39;), description: INNER_TEXT(result, &#39;.st&#39;), url: INNER_TEXT(result, &#39;cite&#39;) }       document.</description>
    </item>
    
    <item>
      <title>html</title>
      <link>https://www.montferret.dev/docs/stdlib/html/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/stdlib/html/</guid>
      <description>ATTR_GET   Source
ATTR_GET gets single or more attribute(s) of a given element.
           Argument Type Default value Description   node HTMLPage HTMLDocument HTMLElement  Target node.   attrNames String, repeated  Attribute name(s).    Returns Object Key-value pairs of attribute values.
  ATTR_REMOVE   Source
ATTR_REMOVE removes single or more attribute(s) of a given element.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://www.montferret.dev/docs/fql/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/introduction/</guid>
      <description>What is Ferret Query Language? The Ferret Query Language (FQL) is heavily inspired by the ArangoDB Query Language (AQL) and used as a starting point. But due to the domain specifics, there are some differences in how things work and future language changes are expected.
Even though, FQL is used to read data from the websites, it&amp;rsquo;s considered as a general purpose query language. That means that all web related functionality is implemented as functions from the FQL Standard Library.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://www.montferret.dev/docs/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/introduction/</guid>
      <description>What is Ferret? Ferret project is an ambitious initiative trying to bring the universal platform for writing scrapers without any hassle. It aims to simplify data extraction from the web for UI testing, machine learning, analytics and more.
Ferret allows you to focus on the data by abstracting away the technical details and complexity of underlying technologies using its own declarative language.
Ferret is extremely portable, extensible and fast.
Motivation Nowadays data is everything and who owns data - owns the world.</description>
    </item>
    
    <item>
      <title>io/fs</title>
      <link>https://www.montferret.dev/docs/stdlib/io-fs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/stdlib/io-fs/</guid>
      <description>IO::FS::READ   Source
READ reads from a given file.
           Argument Type Default value Description   path String  Path to file to read from.    Returns Binary File content in binary format.
  IO::FS::WRITE   Source
WRITE writes the given data into the file.
           Argument Type Default value Description   path String  File path to write into.</description>
    </item>
    
    <item>
      <title>io/net/http</title>
      <link>https://www.montferret.dev/docs/stdlib/io-net-http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/stdlib/io-net-http/</guid>
      <description>IO::NET::HTTP::DELETE   Source
DELETE makes a HTTP DELETE request.
           Argument Type Default value Description   params Object  Request parameters.   params.url String  Target url   params.body Binary  Request data   params.headers Object  Http headers    Returns Binary Response in binary format
  IO::NET::HTTP::DO   Source</description>
    </item>
    
    <item>
      <title>math</title>
      <link>https://www.montferret.dev/docs/stdlib/math/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/stdlib/math/</guid>
      <description>ABS   Source
ABS returns the absolute value of a given number.
           Argument Type Default value Description   number Int Float  Input number.    Returns Float The absolute value of a given number.
  ACOS   Source
ACOS returns the arccosine, in radians, of a given number.
           Argument Type Default value Description   number Int Float  Input number.</description>
    </item>
    
    <item>
      <title>objects</title>
      <link>https://www.montferret.dev/docs/stdlib/objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/stdlib/objects/</guid>
      <description>HAS   Source
HAS returns the value stored by the given key.
           Argument Type Default value Description   key String  The key name string.    Returns Boolean True if the key exists else false.
  KEEP_KEYS   Source
KEEP_KEYS returns a new object with only given keys.
           Argument Type Default value Description   obj Object  Source object.</description>
    </item>
    
    <item>
      <title>path</title>
      <link>https://www.montferret.dev/docs/stdlib/path/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/stdlib/path/</guid>
      <description>PATH::BASE   Source
BASE returns the last component of the path or the path itself if it does not contain any directory separators.
           Argument Type Default value Description   path String  The path.    Returns String The last component of the path.
  PATH::CLEAN   Source
CLEAN returns the shortest path name equivalent to path.</description>
    </item>
    
    <item>
      <title>strings</title>
      <link>https://www.montferret.dev/docs/stdlib/strings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/stdlib/strings/</guid>
      <description>CONCAT   Source
CONCAT concatenates one or more instances of String, or an Array.
           Argument Type Default value Description   src String, repeated String[]  The source string / array.    Returns String A string value.
  CONCAT_SEPARATOR   Source
CONCAT_SEPARATOR concatenates one or more instances of String, or an Array with a given separator.</description>
    </item>
    
    <item>
      <title>testing</title>
      <link>https://www.montferret.dev/docs/stdlib/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/stdlib/testing/</guid>
      <description>T::ARRAY   Source
ARRAY asserts that value is a array type.
           Argument Type Default value Description   actual Any  Value to test.   message String  Message to display on error.    Returns None
  T::BINARY   Source
BINARY asserts that value is a binary type.
           Argument Type Default value Description   actual Any  Value to test.</description>
    </item>
    
    <item>
      <title>types</title>
      <link>https://www.montferret.dev/docs/stdlib/types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/stdlib/types/</guid>
      <description>IS_ARRAY   Source
IS_ARRAY checks whether value is an array value.
           Argument Type Default value Description   value Any  Input value of arbitrary type.    Returns Boolean Returns true if value is array, otherwise false.
  IS_BINARY   Source
IS_BINARY checks whether value is a binary value.
           Argument Type Default value Description   value Any  Input value of arbitrary type.</description>
    </item>
    
    <item>
      <title>utils</title>
      <link>https://www.montferret.dev/docs/stdlib/utils/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/stdlib/utils/</guid>
      <description>PRINT   Source
PRINT writes messages into the system log.
           Argument Type Default value Description   message Value, repeated  Print message.    Returns None
  WAIT   Source
WAIT pauses the execution for a given period.
           Argument Type Default value Description   timeout Int Float  Number value which indicates for how long to stop an execution.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://www.montferret.dev/docs/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/installation/</guid>
      <description>Installation Even though, Ferret comes as a CLI executable, it also can be used as a library.
CLI From binary You can download latest binaries from here.
From the source $ go get github.com/MontFerret/ferret Library $ go get github.com/MontFerret/ferret/pkg/compiler Environment In order to use all Ferret features, you will need to have Chrome either installed locally or running in Docker. For ease of use we recommend to run Chrome inside a Docker container:</description>
    </item>
    
    <item>
      <title>Pagination</title>
      <link>https://www.montferret.dev/cookbook/pagination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/cookbook/pagination/</guid>
      <description>There are several way how to implement pagination.
Controlled In a controlled pagination, we either pass a number of pages to scrape or extract the number from the target page:
Run   LET baseURL = &#39;https://www.amazon.com/&#39; LET amazon = DOCUMENT(baseURL, { driver: &#34;cdp&#34; }) INPUT(amazon, &#39;#twotabsearchtextbox&#39;, @criteria) CLICK(amazon, &#39;.nav-search-submit input[type=&#34;submit&#34;]&#39;) WAIT_NAVIGATION(amazon) LET resultListSelector = &#39;div.s-result-list&#39; LET resultItemSelector = &#39;[data-component-type=&#34;s-search-result&#34;]&#39; LET nextBtnSelector = &#39;ul.a-pagination .a-last a&#39; LET priceWholeSelector = &#39;.a-price-whole&#39; LET priceFracSelector = &#39;.</description>
    </item>
    
    <item>
      <title>Syntax</title>
      <link>https://www.montferret.dev/docs/fql/syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/syntax/</guid>
      <description>Syntax Query types An FQL query must return a result indicated by usage either of the RETURN or FOR IN keywords. The FQL parser will return an error if it cannot find any of these two statements.
Whitespace Whitespaces (blanks, carriage returns, line feeds, and tab stops) can be used in the query text to increase its readability. Tokens have to be separated by any number of whitespaces. Whitespace within strings or names must be enclosed in quotes in order to be preserved.</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://www.montferret.dev/docs/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/getting-started/</guid>
      <description>Quick start Browserless mode If you want to play with FQL and check its syntax, you can run CLI with the following commands to run Ferret CLI in REPL mode:
$ ferret Welcome to Ferret REPL Please use `exit` or `Ctrl-D` to exit this program. &amp;gt;% &amp;gt;LET doc = DOCUMENT(&amp;#39;https://news.ycombinator.com/&amp;#39;) &amp;gt;FOR post IN ELEMENTS(doc, &amp;#39;.storylink&amp;#39;) &amp;gt;RETURN post.attributes.href &amp;gt;% NOTE: symbol % is used to start and end multi-line queries. You also can use the heredoc format.</description>
    </item>
    
    <item>
      <title>iframes</title>
      <link>https://www.montferret.dev/cookbook/iframes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/cookbook/iframes/</guid>
      <description>In order to find a particular iframe, you need to find it by its name or src.
Beware, a target iframe must be in the same domain, otherwise its properties and content will be unavailable.  Run   LET page = DOCUMENT(&#34;https://www.w3schools.com/html/html_iframe.asp&#34;, { driver: &#34;cdp&#34; }) LET content = ( FOR f IN page.frames FILTER f.URL == &#34;https://www.w3schools.com/html/default.asp&#34; RETURN f.head.innerHTML ) RETURN FIRST(content)       document.</description>
    </item>
    
    <item>
      <title>Operators</title>
      <link>https://www.montferret.dev/docs/fql/operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/operators/</guid>
      <description>Operators FQL supports a number of operators that can be used in expressions. There are comparison, logical, arithmetic, and the ternary operator.
Comparison operators Comparison (or relational) operators compare two operands. They can be used with any input data types, and will return a boolean result value.
The following comparison operators are supported:
 == equality != inequality &amp;lt; less than &amp;lt;= less or equal &amp;gt; greater than &amp;gt;= greater or equal IN test if a value is contained in an array NOT IN test if a value is not contained in an array LIKE tests if a string value matches a pattern =~ tests if a string value matches a regular expression !</description>
    </item>
    
    <item>
      <title>Screenshots</title>
      <link>https://www.montferret.dev/cookbook/screenshot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/cookbook/screenshot/</guid>
      <description>Output of the function is base64-encoded binary file.
Run   RETURN SCREENSHOT(&#34;https://www.montferret.dev/&#34;)       document.addEventListener(&#39;DOMContentLoaded&#39;, function () { function createEditor(id, mode) { const editor = ace.edit(id); editor.setTheme(&#34;ace\/theme\/tomorrow_night&#34;); editor.session.setMode(&#34;ace/mode/&#34; + mode); return editor; } const btn = document.querySelector(&#39;#code-editor-941-run-button&#39;); const textEditor = createEditor(&#39;code-editor-941-text&#39;, &#39;aql&#39;); const resultEditor = createEditor(&#39;code-editor-941-result&#39;, &#39;json&#39;); resultEditor.setReadOnly(true);function setContent(editor, content) { editor.setValue(content, -1); } let isRunning = false; function onStart() { isRunning = true; textEditor.setReadOnly(true); btn.</description>
    </item>
    
    <item>
      <title>Data types</title>
      <link>https://www.montferret.dev/docs/fql/data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/data-types/</guid>
      <description>Data types FQL supports both primitive data types consisting of exactly one value and compound data types comprised of multiple values. The following types are available:
  Data type Description     none An empty value, also: the absence of a value   boolean Boolean truth value with possible values false and true   integer Signed whole number   float Signed floating point number   string UTF-8 encoded text value   array Sequence of values, referred to by their positions   object Sequence of values, referred to by their names   binary Sequence of binary values   custom User defined types    Primitive types None value A none value can be used to represent an empty or absent value.</description>
    </item>
    
    <item>
      <title>Navigation</title>
      <link>https://www.montferret.dev/cookbook/navigation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/cookbook/navigation/</guid>
      <description>Navigate by url Run   LET page = DOCUMENT(&#34;https://github.com/&#34;, { driver: &#34;cdp&#34; }) LET header1 = ELEMENT(page, &#39;meta[name=&#34;description&#34;]&#39;).attributes.content NAVIGATE(page, &#34;https://github.com/features&#34;, 10000) LET header2 = ELEMENT(page, &#39;meta[name=&#34;description&#34;]&#39;).attributes.content RETURN [header1, header2]       document.addEventListener(&#39;DOMContentLoaded&#39;, function () { function createEditor(id, mode) { const editor = ace.edit(id); editor.setTheme(&#34;ace\/theme\/tomorrow_night&#34;); editor.session.setMode(&#34;ace/mode/&#34; + mode); return editor; } const btn = document.querySelector(&#39;#code-editor-334-run-button&#39;); const textEditor = createEditor(&#39;code-editor-334-text&#39;, &#39;aql&#39;); const resultEditor = createEditor(&#39;code-editor-334-result&#39;, &#39;json&#39;); resultEditor.setReadOnly(true);function setContent(editor, content) { editor.</description>
    </item>
    
    <item>
      <title>Bind parameters</title>
      <link>https://www.montferret.dev/docs/fql/bind-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/bind-parameters/</guid>
      <description>Bind parameters FQL supports the usage of bind parameters, thus allowing to separate the query text from literal values used in the query. It is good practice to separate the query text from the literal values because it allows to reuse same query in different scenarios.
Using bind parameters, the meaning of an existing query cannot be changed. Bind parameters can be used everywhere in a query where literals can be used.</description>
    </item>
    
    <item>
      <title>Type and value order</title>
      <link>https://www.montferret.dev/docs/fql/type-value-order/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/type-value-order/</guid>
      <description>Type and value order When checking for equality or inequality or when determining the sort order of values, FQL uses a deterministic algorithm that takes both the data types and the actual values into account.
The compared operands are first compared by their data types, and only by their data values if the operands have the same data types.
The following type order is used when comparing data types:
none    document.</description>
    </item>
    
    <item>
      <title>Query results</title>
      <link>https://www.montferret.dev/docs/fql/query-results/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/query-results/</guid>
      <description>Query results Unlike AQL, the result of an FQL query is an not always array of values. The individual values can be returned, not wrapped by an array.
For example, when the RETURN statement is used as the last query statement, a values gets returned as it is:
RETURN 1     document.addEventListener(&#39;DOMContentLoaded&#39;, function () { const editor = ace.edit(&#39;code-754-text&#39;); editor.setTheme(&#34;ace/theme/tomorrow_night&#34;); editor.session.setMode(&#34;ace/mode/&#34; + &#39;aql&#39;); editor.setOptions({readOnly: true, highlightActiveLine: false, highlightGutterLine: false}); editor.</description>
    </item>
    
    <item>
      <title>Query errors</title>
      <link>https://www.montferret.dev/docs/fql/query-errors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/query-errors/</guid>
      <description>Query errors Issuing an invalid query to Ferret will result in a parse error if the query is syntactically invalid. The Ferret compiler will detect such errors during query inspection and abort further processing. Instead, an error message are returned so that the errors can be fixed.
Under some circumstances, executing a query may also produce run-time errors that cannot be predicted from inspecting the query text alone. This is because queries may use data from collections that may also be inhomogeneous.</description>
    </item>
    
    <item>
      <title>Ferret v0.12.0</title>
      <link>https://www.montferret.dev/blog/ferret-v0.12.0/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/ferret-v0.12.0/</guid>
      <description>Hello fellow miners,
We are happy to announce a new Ferret release - Ferret v0.12.0.
This release has a new useful module in the standard library - testing!
Let&amp;rsquo;s dig in. The full changelog you can find here.
 What&amp;rsquo;s added Assertion library A new T namespace has been added to the standard library that provides some helpful methods for making assertions. The functions can be used to test UI, validate data and ensure the correctnes of a script.</description>
    </item>
    
    <item>
      <title>Ferret v0.11.1</title>
      <link>https://www.montferret.dev/blog/ferret-v0.11.1/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/ferret-v0.11.1/</guid>
      <description>Hello fellow miners,
Ferret v0.11.1 has been released with a hotfix that solves an error in some functions that do screen positioning using scrolling.</description>
    </item>
    
    <item>
      <title>Ferret v0.11.0</title>
      <link>https://www.montferret.dev/blog/ferret-v0.11.0/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/ferret-v0.11.0/</guid>
      <description>Hello fellow miners,
Today, we are living in unprecedented times. There are almost 5 million people infected by COVID-19 and thousands die every day in the world.
During this time, the highest priority is to stay safe and healthy, take care of family.
 Ferret team has been locked down in their homes with their families as everyone around the globe, but still has managed to make new Ferret v0.11.0 release!</description>
    </item>
    
    <item>
      <title>New release strategy</title>
      <link>https://www.montferret.dev/blog/new-release-strategy/</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/new-release-strategy/</guid>
      <description>Working on an open source project while you have a full time job sometimes is challenging. Especially, when you try to make every release full of new features and bug fixes.
Recent Ferret releases have showed, that trying to bring many features at one time is very time consuming and frustrating for end users. Therefore, our team has decided to change our release strategy.
In order to ship new releases more frequently, we are going to decrease amount of features and bug fixes per release.</description>
    </item>
    
    <item>
      <title>Ferret v0.10.0</title>
      <link>https://www.montferret.dev/blog/ferret-v0.10.0/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/ferret-v0.10.0/</guid>
      <description>Hello fellow miners, Ferret v0.10.0 has been finally released!
It&amp;rsquo;s been long and busy 6 months since the last release and many of you might thought that the project got abandoned. We assure you it&amp;rsquo;s not! But sometimes life happens and slows you down.
But we are back and ready to rock!
This release has many great features and improvements thank to all our contributors. Let&amp;rsquo;s take a look at the most important ones.</description>
    </item>
    
    <item>
      <title>Ferret v0.9</title>
      <link>https://www.montferret.dev/blog/ferret-v0.9/</link>
      <pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/ferret-v0.9/</guid>
      <description>Hello fellow miners, Ferret v0.9 has been released!
In this release, we mostly focused on bug fixes and filling gaps in user interaction functionality.
Let&amp;rsquo;s see what we&amp;rsquo;ve got.
What&amp;rsquo;s added Clearing input values Since early versions, Ferret has INPUT HTML function that allowed to type any value to input HTML element. This works by appending the function parameter to any pre-existing &amp;lt;input&amp;gt; value. While it works fine in many cases, there are some scenarios when a target input field has a preset value which needs to be erased.</description>
    </item>
    
    <item>
      <title>Ferret v0.8.2</title>
      <link>https://www.montferret.dev/blog/ferret-v0.8.2/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/ferret-v0.8.2/</guid>
      <description>Another portion of hot fixes has arrived!
v0.8.2 release brings some critical fixes.
Scrolling position is not centered In 0.8, we introduced a new behavior for all user interactions. Before any actions like clicking ot typing, we scroll into a target element making it visible in a viewport. But the logic behind it, positioned elements on the top of the viewport, which led to some issues on some websites due to their markup - the elements were still invisible because they were under other elements.</description>
    </item>
    
    <item>
      <title>Ferret v0.8.1</title>
      <link>https://www.montferret.dev/blog/ferret-v0.8.1/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/ferret-v0.8.1/</guid>
      <description>With all big features, come small bugs. :)
With this new v0.8.1 release we are providing hot fixes for some of these small ones.
Broken CLICK function In 0.7 CLICK and CLICK_ALL functions were doing a check before clicking and was returning a boolean value indicating whether a target element was clicked. In 0.8 this logic got broken due to internal refactorings and the check was not performed which led to broken scripts using this returned value.</description>
    </item>
    
    <item>
      <title>Ferret v0.8</title>
      <link>https://www.montferret.dev/blog/ferret-v0.8/</link>
      <pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/ferret-v0.8/</guid>
      <description>Hooray, Ferret v0.8 has been released!
It&amp;rsquo;s been a while since the last release, but we worked hard to bring new and better Ferret. This release has many new exciting features, but unfortunately, there are also some breaking changes.
You can find the full changelog here.
Let&amp;rsquo;s go!
What&amp;rsquo;s added iframe Ferret finally supports iframe elements. When a page gets loaded, Ferret finds all available elements and provieds an access to them via the .</description>
    </item>
    
    <item>
      <title>Say &#39;Hello&#39; to Ferret</title>
      <link>https://www.montferret.dev/blog/say-hello-to-ferret/</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/say-hello-to-ferret/</guid>
      <description>As a developer, you&amp;rsquo;ve probably created a couple of web scrapers to get some data from the Internet during your career. That data could be images for an AI project or hotel prices from booking websites for a new travel mobile app or something else. But something that needs data.
It&amp;rsquo;s a relatively easy task to write one or two web scrapers if the amount of required data is small. But it&amp;rsquo;s a completely different level of complexity when you need to scrape big amount of data and, moreover, do it frequently.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.montferret.dev/fixtures/iframe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/fixtures/iframe/</guid>
      <description>iFrame example
&#34;  </description>
    </item>
    
    <item>
      <title>Try it!</title>
      <link>https://www.montferret.dev/try/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/try/</guid>
      <description>Run   LET doc = DOCUMENT(&#39;https://soundcloud.com/charts/top&#39;, { driver: &#39;cdp&#39; }) WAIT_ELEMENT(doc, &#39;.chartTrack__details&#39;, 5000) LET tracks = ELEMENTS(doc, &#39;.chartTrack__details&#39;) FOR track IN tracks RETURN { artist: TRIM(INNER_TEXT(track, &#39;.chartTrack__username&#39;)), track: TRIM(INNER_TEXT(track, &#39;.chartTrack__title&#39;)) }       document.addEventListener(&#39;DOMContentLoaded&#39;, function () { function createEditor(id, mode) { const editor = ace.edit(id); editor.setTheme(&#34;ace\/theme\/tomorrow_night&#34;); editor.session.setMode(&#34;ace/mode/&#34; + mode); return editor; } const btn = document.querySelector(&#39;#code-editor-950-run-button&#39;); const textEditor = createEditor(&#39;code-editor-950-text&#39;, &#39;aql&#39;); const resultEditor = createEditor(&#39;code-editor-950-result&#39;, &#39;json&#39;); resultEditor.</description>
    </item>
    
  </channel>
</rss>
