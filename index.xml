<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ferret</title>
    <link>https://www.montferret.dev/</link>
    <description>Recent content on Ferret</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.montferret.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction</title>
      <link>https://www.montferret.dev/docs/fql/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/introduction/</guid>
      <description>What is Ferret Query Language? The Ferret Query Language (FQL) is heavily inspired by the ArangoDB Query Language (AQL) and used as a starting point. But due to the domain specifics, there are some differences in how things work and future language changes are expected.
Even though, FQL is used to read data from the websites, it&amp;rsquo;s considered as a general purpose query language. That means that all web related functionality is implemented as functions from the FQL Standard Library.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://www.montferret.dev/docs/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/introduction/</guid>
      <description>What is Ferret? Ferret project is an ambitious initiative trying to bring the universal platform for writing scrapers without any hassle. It aims to simplify data extraction from the web for UI testing, machine learning, analytics and more.
Ferret allows you to focus on the data by abstracting away the technical details and complexity of underlying technologies using its own declarative language.
Ferret is extremely portable, extensible and fast.
Motivation Nowadays data is everything and who owns data - owns the world.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://www.montferret.dev/docs/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/installation/</guid>
      <description>Installation Even though, Ferret comes as a CLI executable, it also can be used as a library.
CLI From binary You can download latest binaries from here.
From the source $ go get github.com/MontFerret/ferret   Library $ go get github.com/MontFerret/ferret/pkg/compiler   Environment In order to use all Ferret features, you will need to have Chrome either installed locally or running in Docker. For ease of use we recommend to run Chrome inside a Docker container:</description>
    </item>
    
    <item>
      <title>Syntax</title>
      <link>https://www.montferret.dev/docs/fql/syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/syntax/</guid>
      <description>Syntax Query types An FQL query must return a result indicated by usage either of the RETURN or FOR IN keywords. The FQL parser will return an error if it cannot find any of these two statements.
Whitespace Whitespaces (blanks, carriage returns, line feeds, and tab stops) can be used in the query text to increase its readability. Tokens have to be separated by any number of whitespaces. Whitespace within strings or names must be enclosed in quotes in order to be preserved.</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://www.montferret.dev/docs/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/getting-started/</guid>
      <description>Quick start Browserless mode If you want to play with FQL and check its syntax, you can run CLI with the following commands to run Ferret CLI in REPL mode:
$ ferret   Welcome to Ferret REPL Please use `exit` or `Ctrl-D` to exit this program. % LET doc = DOCUMENT(&#39;https://news.ycombinator.com/&#39;) FOR post IN ELEMENTS(doc, &#39;.storylink&#39;) RETURN post.attributes.href %   NOTE: symbol % is used to start and end multi-line queries.</description>
    </item>
    
    <item>
      <title>Operators</title>
      <link>https://www.montferret.dev/docs/fql/operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/operators/</guid>
      <description>Operators FQL supports a number of operators that can be used in expressions. There are comparison, logical, arithmetic, and the ternary operator.
Comparison operators Comparison (or relational) operators compare two operands. They can be used with any input data types, and will return a boolean result value.
The following comparison operators are supported:
 == equality != inequality &amp;lt; less than &amp;lt;= less or equal &amp;gt; greater than &amp;gt;= greater or equal IN test if a value is contained in an array NOT IN test if a value is not contained in an array LIKE tests if a string value matches a pattern =~ tests if a string value matches a regular expression !</description>
    </item>
    
    <item>
      <title>Data types</title>
      <link>https://www.montferret.dev/docs/fql/data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/data-types/</guid>
      <description>Data types FQL supports both primitive data types consisting of exactly one value and compound data types comprised of multiple values. The following types are available:
Primitive types None value A none value can be used to represent an empty or absent value. It is different from a numerical value of zero (null != 0) and other falsy values (false, zero-length string, empty array or object). It is also known as nil or null in other languages.</description>
    </item>
    
    <item>
      <title>Bind parameters</title>
      <link>https://www.montferret.dev/docs/fql/bind-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/bind-parameters/</guid>
      <description>Bind parameters FQL supports the usage of bind parameters, thus allowing to separate the query text from literal values used in the query. It is good practice to separate the query text from the literal values because it allows to reuse same query in different scenarios.
Using bind parameters, the meaning of an existing query cannot be changed. Bind parameters can be used everywhere in a query where literals can be used.</description>
    </item>
    
    <item>
      <title>Type and value order</title>
      <link>https://www.montferret.dev/docs/fql/type-value-order/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/type-value-order/</guid>
      <description>Type and value order When checking for equality or inequality or when determining the sort order of values, FQL uses a deterministic algorithm that takes both the data types and the actual values into account.
The compared operands are first compared by their data types, and only by their data values if the operands have the same data types.
The following type order is used when comparing data types:
none  This means none is the smallest type in FQL and object is the type with the highest order.</description>
    </item>
    
    <item>
      <title>Query results</title>
      <link>https://www.montferret.dev/docs/fql/query-results/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/query-results/</guid>
      <description>Query results Unlike AQL, The result of an FQL query is an not always array of values. The individual values can be returned, not wrapped by an array.
For example, when the RETURN statement is used as the last query statement, a values gets returned as it is:
RETURN 1   1 RETURN { foo: &#34;bar&#34; }   { &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34; } However, when returning data from an iteration, the result values will be always an array:</description>
    </item>
    
    <item>
      <title>Query errors</title>
      <link>https://www.montferret.dev/docs/fql/query-errors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/docs/fql/query-errors/</guid>
      <description>Query errors Issuing an invalid query to Ferret will result in a parse error if the query is syntactically invalid. The Ferret compiler will detect such errors during query inspection and abort further processing. Instead, an error message are returned so that the errors can be fixed.
Under some circumstances, executing a query may also produce run-time errors that cannot be predicted from inspecting the query text alone. This is because queries may use data from collections that may also be inhomogeneous.</description>
    </item>
    
    <item>
      <title>Ferret v0.11.0</title>
      <link>https://www.montferret.dev/blog/ferret-v0.11.0/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/ferret-v0.11.0/</guid>
      <description>Hello fellow miners,
Today, we are living in unprecedented times. There are almost 5 million people infected by COVID-19 and thousands die every day in the world.
During this time, the highest priority is to stay safe and healthy, take care of family.
 Ferret team has been locked down in their homes with their families as everyone around the globe, but still has managed to make new Ferret v0.11.0 release!</description>
    </item>
    
    <item>
      <title>New release strategy</title>
      <link>https://www.montferret.dev/blog/new-release-strategy/</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/new-release-strategy/</guid>
      <description>Working on an open source project while you have a full time job sometimes is challenging. Especially, when you try to make every release full of new features and bug fixes.
Recent Ferret releases have showed, that trying to bring many features at one time is very time consuming and frustrating for end users. Therefore, our team has decided to change our release strategy.
In order to ship new releases more frequently, we are going to decrease amount of features and bug fixes per release.</description>
    </item>
    
    <item>
      <title>Ferret v0.10.0</title>
      <link>https://www.montferret.dev/blog/ferret-v0.10.0/</link>
      <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/ferret-v0.10.0/</guid>
      <description>Hello fellow miners, Ferret v0.10.0 has been finally released!
It&amp;rsquo;s been long and busy 6 months since the last release and many of you might thought that the project got abandoned. We assure you it&amp;rsquo;s not! But sometimes life happens and slows you down.
But we are back and ready to rock!
This release has many great features and improvements thank to all our contributors. Let&amp;rsquo;s take a look at the most important ones.</description>
    </item>
    
    <item>
      <title>Ferret v0.9</title>
      <link>https://www.montferret.dev/blog/ferret-v0.9/</link>
      <pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/ferret-v0.9/</guid>
      <description>Hello fellow miners, Ferret v0.9 has been released!
In this release, we mostly focused on bug fixes and filling gaps in user interaction functionality.
Let&amp;rsquo;s see what we&amp;rsquo;ve got.
What&amp;rsquo;s added Clearing input values Since early versions, Ferret has INPUT HTML function that allowed to type any value to input HTML element. This works by appending the function parameter to any pre-existing &amp;lt;input&amp;gt; value. While it works fine in many cases, there are some scenarios when a target input field has a preset value which needs to be erased.</description>
    </item>
    
    <item>
      <title>Ferret v0.8.2</title>
      <link>https://www.montferret.dev/blog/ferret-v0.8.2/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/ferret-v0.8.2/</guid>
      <description>Another portion of hot fixes has arrived!
v0.8.2 release brings some critical fixes.
Scrolling position is not centered In 0.8, we introduced a new behavior for all user interactions. Before any actions like clicking ot typing, we scroll into a target element making it visible in a viewport. But the logic behind it, positioned elements on the top of the viewport, which led to some issues on some websites due to their markup - the elements were still invisible because they were under other elements.</description>
    </item>
    
    <item>
      <title>Ferret v0.8.1</title>
      <link>https://www.montferret.dev/blog/ferret-v0.8.1/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/ferret-v0.8.1/</guid>
      <description>With all big features, come small bugs. :)
With this new v0.8.1 release we are providing hot fixes for some of these small ones.
Broken CLICK function In 0.7 CLICK and CLICK_ALL functions were doing a check before clicking and was returning a boolean value indicating whether a target element was clicked. In 0.8 this logic got broken due to internal refactorings and the check was not performed which led to broken scripts using this returned value.</description>
    </item>
    
    <item>
      <title>Ferret v0.8</title>
      <link>https://www.montferret.dev/blog/ferret-v0.8/</link>
      <pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/ferret-v0.8/</guid>
      <description>Hooray, Ferret v0.8 has been released!
It&amp;rsquo;s been a while since the last release, but we worked hard to bring new and better Ferret. This release has many new exciting features, but unfortunately, there are also some breaking changes.
You can find the full changelog here.
Let&amp;rsquo;s go!
What&amp;rsquo;s added iframe Ferret finally supports iframe elements. When a page gets loaded, Ferret finds all available elements and provieds an access to them via the .</description>
    </item>
    
    <item>
      <title>Say &#39;Hello&#39; to Ferret</title>
      <link>https://www.montferret.dev/blog/say-hello-to-ferret/</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.montferret.dev/blog/say-hello-to-ferret/</guid>
      <description>As a developer, you&amp;rsquo;ve probably created a couple of web scrapers to get some data from the Internet during your career. That data could be images for an AI project or hotel prices from booking websites for a new travel mobile app or something else. But something that needs data.
It&amp;rsquo;s a relatively easy task to write one or two web scrapers if the amount of required data is small. But it&amp;rsquo;s a completely different level of complexity when you need to scrape big amount of data and, moreover, do it frequently.</description>
    </item>
    
  </channel>
</rss>